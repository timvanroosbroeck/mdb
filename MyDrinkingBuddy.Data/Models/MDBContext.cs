// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;

namespace MyDrinkingBuddy.Data.Models
{
    public partial class MDBContext : DbContext
    {
        public MDBContext()
        {
        }

        public MDBContext(DbContextOptions<MDBContext> options)
            : base(options)
        {
        }

        public virtual DbSet<Drink> Drink { get; set; }
        public virtual DbSet<DrinkCategory> DrinkCategory { get; set; }
        public virtual DbSet<Session> Session { get; set; }
        public virtual DbSet<SessionDrink> SessionDrink { get; set; }
        public virtual DbSet<User> User { get; set; }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<Drink>(entity =>
            {
                entity.Property(e => e.CreatedBy)
                    .IsRequired()
                    .HasMaxLength(520);

                entity.Property(e => e.CreatedOn).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.ImageUrl).HasMaxLength(250);

                entity.Property(e => e.ModifiedBy).HasMaxLength(520);

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(250);

                entity.HasOne(d => d.DrinkCategory)
                    .WithMany(p => p.Drink)
                    .HasForeignKey(d => d.DrinkCategoryId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Drink_DrinkCategory");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.Drink)
                    .HasForeignKey(d => d.UserId)
                    .HasConstraintName("FK_Drink_User");
            });

            modelBuilder.Entity<DrinkCategory>(entity =>
            {
                entity.Property(e => e.CreatedBy)
                    .IsRequired()
                    .HasMaxLength(520);

                entity.Property(e => e.CreatedOn).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.ModifiedBy).HasMaxLength(520);

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(250);

                entity.HasOne(d => d.DrinkParentCategory)
                    .WithMany(p => p.InverseDrinkParentCategory)
                    .HasForeignKey(d => d.DrinkParentCategoryId)
                    .HasConstraintName("FK_DrinkCategory_DrinkCategory");
            });

            modelBuilder.Entity<Session>(entity =>
            {
                entity.Property(e => e.CreatedBy)
                    .IsRequired()
                    .HasMaxLength(520);

                entity.Property(e => e.CreatedOn).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.ModifiedBy).HasMaxLength(520);

                entity.HasOne(d => d.User)
                    .WithMany(p => p.Session)
                    .HasForeignKey(d => d.UserId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_DrinkingSession_User");
            });

            modelBuilder.Entity<SessionDrink>(entity =>
            {
                entity.Property(e => e.Comment).HasMaxLength(250);

                entity.Property(e => e.CreatedBy)
                    .IsRequired()
                    .HasMaxLength(520);

                entity.Property(e => e.CreatedOn).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.ModifiedBy).HasMaxLength(520);

                entity.HasOne(d => d.Drink)
                    .WithMany(p => p.SessionDrink)
                    .HasForeignKey(d => d.DrinkId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SessionDrink_Drink");

                entity.HasOne(d => d.Session)
                    .WithMany(p => p.SessionDrink)
                    .HasForeignKey(d => d.SessionId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SessionDrink_Session");
            });

            modelBuilder.Entity<User>(entity =>
            {
                entity.HasKey(e => e.UserId)
                    .HasName("NCI_User")
                    .IsClustered(false);

                entity.Property(e => e.CreatedBy)
                    .IsRequired()
                    .HasMaxLength(520);

                entity.Property(e => e.CreatedOn).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.CultureCode)
                    .IsRequired()
                    .HasMaxLength(5);

                entity.Property(e => e.Email)
                    .IsRequired()
                    .HasMaxLength(256);

                entity.Property(e => e.FirstName)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.LastName)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.ModifiedBy).HasMaxLength(520);

                entity.Property(e => e.Weight).HasColumnName("weight");
            });

            OnModelCreatingPartial(modelBuilder);
        }

        partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
    }
}